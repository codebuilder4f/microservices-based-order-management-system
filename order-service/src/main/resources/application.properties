spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.datasource.password=
spring.jpa.hibernate.ddl-auto=update

server.port=8089

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name = order-service

#Enable Actuator
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Pretty print JSON output of Spring Boot Actuator endpoints
spring.jackson.serialization.indent_output=true

#Resilinece4j Properties
#registerHealthIndicator: To see different state . CLOSED/OPEN/HALF-OPEN
#event-consumer-buffer-siz: How much buffer time going to allocate for the event
#slidingWindowType/slidingWindowSize: CB not immediately open. After some failure count then it will open. That count here is 5
#failureRateThreshold: fail rate here it is 50%
#waitDurationInOpenState: Wait time in open state
#permittedNumberOfCallsInHalfOpenState: In half-open sate can be allow 3 request
#automaticTransitionFromOpenToHalfOpenEnabled: Enable to change automatically open to half open

resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true


#Resilience4J Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties
#max-attempts: Retry attempt should be 3
#wait-duration: If response not coming withing 5s then retry 3 times
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

#zipkin
#probability : We need to send 100% of request (all request) to the zipkin
spring.zipkin.base-url=http://localhost:9411
spring.sleuth.sampler.probability= 1.0

#Kafka properties
#default-topic : Here send message ony for single topic then we configure that as default topic
#key/value-serializer : How to serialize these key and value while send to the kafka (KafkaTemplate<String, OrderPlacedEvent>)

spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.programmingtechie.orderservice.event.OrderPlacedEvent

